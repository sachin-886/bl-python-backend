{
  "pentestVulnerabilityData": {
    "queryPentestVulnerability": [
      {
        "id": "NULL",
        "name": "HTTP Arbitrary Methods Enabled",
        "tags": "NULL",
        "description": "The web server supports arbitrary and invalid HTTP methods which could be a potential misconfiguration.",
        "recommendation": "All not used or arbitrary supported methods should be disabled and return an HTTP 405 method not allowed in application responses.",
        "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
        "cwe": 650,
        "cvsScore": {
          "baseScore": 0.0,
          "impactSubscore": 0.0,
          "exploitabilitySubscore": 3.887042775,
          "overallScore": 0.0
        },
        "severity": { "key": "INFORMATIONAL", "name": "Informational" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "HTTP Arbitrary Methods Enabled",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "HTTP Arbitrary Methods Enabled",
          "tags": "NULL",
          "description": "The web server supports arbitrary and invalid HTTP methods which could be a potential misconfiguration.",
          "recommendation": "All not used or arbitrary supported methods should be disabled and return an HTTP 405 method not allowed in application responses.",
          "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
          "cvssScore": {
            "baseScore": 0.0,
            "impactSubscore": 0.0,
            "exploitabilitySubscore": 3.887042775,
            "overallScore": 0.0
          },
          "severity": { "key": "INFORMATIONAL", "name": "Informational" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": { "id": "NULL", "name": "HTTP Arbitrary Methods Enabled" },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": " Web Application Does Not Supply a Content-Security-Policy Header",
        "tags": "NULL",
        "description": "The web application does not return a Content-Security-Policy header. Content Security Policy (CSP) is a web security standard designed to make it harder for an attacker to exploit certain types of attacks, such as data injections attacks, including Cross-Site Scripts (XSS). CSP allows web servers to declare sources of content that browsers are explicitly allowed to consider valid source of executable scripts and load on the page, through the use of the Content-Security-Policy HTTP header.",
        "recommendation": "Implement the Content-Security-Policy HTTP header, containing an appropriate policy for your applications functionality and needs.",
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
        "cwe": 693,
        "cvsScore": {
          "baseScore": 3.1,
          "impactSubscore": 1.4124,
          "exploitabilitySubscore": 1.62014556,
          "overallScore": 3.1
        },
        "severity": { "key": "LOW", "name": "Low" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": " Web Application Does Not Supply a Content-Security-Policy Header",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": " Web Application Does Not Supply a Content-Security-Policy Header",
          "tags": "NULL",
          "description": "The web application does not return a Content-Security-Policy header. Content Security Policy (CSP) is a web security standard designed to make it harder for an attacker to exploit certain types of attacks, such as data injections attacks, including Cross-Site Scripts (XSS). CSP allows web servers to declare sources of content that browsers are explicitly allowed to consider valid source of executable scripts and load on the page, through the use of the Content-Security-Policy HTTP header.",
          "recommendation": "Implement the Content-Security-Policy HTTP header, containing an appropriate policy for your applications functionality and needs.",
          "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
          "cvssScore": {
            "baseScore": 3.1,
            "impactSubscore": 1.4124,
            "exploitabilitySubscore": 1.62014556,
            "overallScore": 3.1
          },
          "severity": { "key": "LOW", "name": "Low" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": " Web Application Does Not Supply a Content-Security-Policy Header"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Web Application is Vulnerable to Clickjacking",
        "tags": "NULL",
        "description": "The web application allows itself to be embedded in other web applications using HTML frames/iframes. An attacker may be able to exploit this by embedding the web application into a webpage they control and using this to get the user to interact with it without knowing it is embedded in a malicious way. This type of attack is known as clickjacking and can be used to trick users into interacting with a maliciously embedded web page without knowing. The X-Frame-Options header is used to indicate whether a browser should be allowed to render a page within another page. It can be used to mitigate clickjacking by setting the value to \u00e2\u20ac\u0153DENY\u00e2\u20ac\u009d which will prevent the embedding of the application in all cases, or to \u00e2\u20ac\u0153SAMEORIGIN\u00e2\u20ac\u009d which will only permit embedding by web application hosted at the same origin. The Content-Security-Policy header can also mitigate clickjacking with the implementation of the \u00e2\u20ac\u02dcframe-ancestors\u00e2\u20ac\u2122 directive.",
        "recommendation": "Implement the appropriate X-Frame-Options and/or Content-Security-Policy HTTP headers in application responses to ensure that the application cannot be embedded in other applications.",
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "cwe": 693,
        "cvsScore": {
          "baseScore": 3.7,
          "impactSubscore": 1.4124,
          "exploitabilitySubscore": 2.2211673,
          "overallScore": 3.7
        },
        "severity": { "key": "LOW", "name": "Low" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Web Application is Vulnerable to Clickjacking",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Web Application is Vulnerable to Clickjacking",
          "tags": "NULL",
          "description": "The web application allows itself to be embedded in other web applications using HTML frames/iframes. An attacker may be able to exploit this by embedding the web application into a webpage they control and using this to get the user to interact with it without knowing it is embedded in a malicious way. This type of attack is known as clickjacking and can be used to trick users into interacting with a maliciously embedded web page without knowing. The X-Frame-Options header is used to indicate whether a browser should be allowed to render a page within another page. It can be used to mitigate clickjacking by setting the value to \u00e2\u20ac\u0153DENY\u00e2\u20ac\u009d which will prevent the embedding of the application in all cases, or to \u00e2\u20ac\u0153SAMEORIGIN\u00e2\u20ac\u009d which will only permit embedding by web application hosted at the same origin. The Content-Security-Policy header can also mitigate clickjacking with the implementation of the \u00e2\u20ac\u02dcframe-ancestors\u00e2\u20ac\u2122 directive.",
          "recommendation": "Implement the appropriate X-Frame-Options and/or Content-Security-Policy HTTP headers in application responses to ensure that the application cannot be embedded in other applications.",
          "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N",
          "cvssScore": {
            "baseScore": 3.7,
            "impactSubscore": 1.4124,
            "exploitabilitySubscore": 2.2211673,
            "overallScore": 3.7
          },
          "severity": { "key": "LOW", "name": "Low" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "Web Application is Vulnerable to Clickjacking"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Same-Site Scripting",
        "tags": "NULL",
        "description": "The web application is vulnerable to same-site scripting attacks. This vulnerability arises when the DNS records for a domain contain an entry for localhost with a missing trailing dot (.) causing the record to be interpreted as a subdomain while pointing to 127.0.0.1. For example, if the DNS records for example.com contain an entry for localhost without a trailing dot, localhost.example.com would then resolve to 127.0.0.1. This can introduce a vulnerability similar to cross-site scripting (XSS) or allow the theft of sensitive cookies if the user's local machines become compromised.",
        "recommendation": "Resolve the DNS misconfiguration (i.e. adding the missing trailing dot) that gives rise to the same-site scripting vulnerability.",
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "cwe": 16,
        "cvsScore": {
          "baseScore": 7.78639008,
          "impactSubscore": 6.8706,
          "exploitabilitySubscore": 9.9968,
          "overallScore": 7.78639008
        },
        "severity": { "key": "HIGH", "name": "High" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Same-Site Scripting",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Same-Site Scripting",
          "tags": "NULL",
          "description": "The web application is vulnerable to same-site scripting attacks. This vulnerability arises when the DNS records for a domain contain an entry for localhost with a missing trailing dot (.) causing the record to be interpreted as a subdomain while pointing to 127.0.0.1. For example, if the DNS records for example.com contain an entry for localhost without a trailing dot, localhost.example.com would then resolve to 127.0.0.1. This can introduce a vulnerability similar to cross-site scripting (XSS) or allow the theft of sensitive cookies if the user's local machines become compromised.",
          "recommendation": "Resolve the DNS misconfiguration (i.e. adding the missing trailing dot) that gives rise to the same-site scripting vulnerability.",
          "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssScore": {
            "baseScore": 7.78639008,
            "impactSubscore": 6.8706,
            "exploitabilitySubscore": 9.9968,
            "overallScore": 7.78639008
          },
          "severity": { "key": "HIGH", "name": "High" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": { "id": "NULL", "name": "Same-Site Scripting" },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Web Application Permits MIME Type Sniffing",
        "tags": "NULL",
        "description": "The web application does not return an X-Content-Type-Options header, which may permit MIME type sniffing. Multipurpose Internet Mail Extensions (MIME) is a standard used to identify the type of content that is being sent over the internet, such as text, image, audio, etc. MIME sniffing occurs when certain browsers attempt to identify the content type of a particular asset by analyzing, or \u00e2\u20ac\u0153sniffing\u00e2\u20ac\u009d the content of a file to identify specific patterns or signatures that match known MIME type. This action poses a security risk, as attackers can abuse this to trick a browser into interpreting files as different MIME types, executing malicious code on a user\u00e2\u20ac\u2122s computer. It also has the potential to lead to information leakage, as MIME sniffing can reveal sensitive information about users\u00e2\u20ac\u2122 habits or application asset contents. Inclusion of the X-Content-Type-Options header with the \"nosniff\" value instructs the browser to accept Content-Type headers returned by the server as authoritative, and not to attempt MIME type sniffing.",
        "recommendation": "Implement the X-Content-Type-Options HTTP header in application responses with the value \"nosniff\".",
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
        "cwe": 693,
        "cvsScore": {
          "baseScore": 9.1,
          "impactSubscore": 9.01,
          "exploitabilitySubscore": 9.62014556,
          "overallScore": 9.1
        },
        "severity": { "key": "Critical", "name": "Critical" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Web Application Permits MIME Type Sniffing",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Web Application Permits MIME Type Sniffing",
          "tags": "NULL",
          "description": "The web application does not return an X-Content-Type-Options header, which may permit MIME type sniffing. Multipurpose Internet Mail Extensions (MIME) is a standard used to identify the type of content that is being sent over the internet, such as text, image, audio, etc. MIME sniffing occurs when certain browsers attempt to identify the content type of a particular asset by analyzing, or \u00e2\u20ac\u0153sniffing\u00e2\u20ac\u009d the content of a file to identify specific patterns or signatures that match known MIME type. This action poses a security risk, as attackers can abuse this to trick a browser into interpreting files as different MIME types, executing malicious code on a user\u00e2\u20ac\u2122s computer. It also has the potential to lead to information leakage, as MIME sniffing can reveal sensitive information about users\u00e2\u20ac\u2122 habits or application asset contents. Inclusion of the X-Content-Type-Options header with the \"nosniff\" value instructs the browser to accept Content-Type headers returned by the server as authoritative, and not to attempt MIME type sniffing.",
          "recommendation": "Implement the X-Content-Type-Options HTTP header in application responses with the value \"nosniff\".",
          "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
          "cvssScore": {
            "baseScore": 9.1,
            "impactSubscore": 9.01,
            "exploitabilitySubscore": 9.62014556,
            "overallScore": 9.1
          },
          "severity": { "key": "Critical", "name": "Critical" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "Web Application Permits MIME Type Sniffing"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Web Application Does Not Supply a Referrer-Policy Header",
        "tags": "NULL",
        "description": "The web server does not return a Referrer-Policy header in the application responses. A Referrer-Policy header instructs the user's browser on whether referrer information should be included with requests and, if so, how much should be included. This can be useful, for example, for determining how users arrive on your website and which of your other sites they visit after they leave. However, the referrer policy should be audited carefully before deploying the web application in order to ensure that excessive information about the user's browsing is not leaked to other websites unintentionally, especially over unsecured connections. To disable referrer information completely, the Referrer-Policy header can be set to no-referrer. Alternatively, to enable referrer information only on the same origin, the value can be set to same-origin.",
        "recommendation": "Implement the Referrer-Policy either in a HTTP header in application responses, or by declaring it in the meta tags, containing an appropriate value for the amount of referrer information required to be sent.",
        "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
        "cwe": 200,
        "cvsScore": {
          "baseScore": 2.5740876,
          "impactSubscore": 2.86275,
          "exploitabilitySubscore": 4.928,
          "overallScore": 2.5740876
        },
        "severity": { "key": "LOW", "name": "Low" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Web Application Does Not Supply a Referrer-Policy Header",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Web Application Does Not Supply a Referrer-Policy Header",
          "tags": "NULL",
          "description": "The web server does not return a Referrer-Policy header in the application responses. A Referrer-Policy header instructs the user's browser on whether referrer information should be included with requests and, if so, how much should be included. This can be useful, for example, for determining how users arrive on your website and which of your other sites they visit after they leave. However, the referrer policy should be audited carefully before deploying the web application in order to ensure that excessive information about the user's browsing is not leaked to other websites unintentionally, especially over unsecured connections. To disable referrer information completely, the Referrer-Policy header can be set to no-referrer. Alternatively, to enable referrer information only on the same origin, the value can be set to same-origin.",
          "recommendation": "Implement the Referrer-Policy either in a HTTP header in application responses, or by declaring it in the meta tags, containing an appropriate value for the amount of referrer information required to be sent.",
          "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
          "cvssScore": {
            "baseScore": 2.5740876,
            "impactSubscore": 2.86275,
            "exploitabilitySubscore": 4.928,
            "overallScore": 2.5740876
          },
          "severity": { "key": "LOW", "name": "Low" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "Web Application Does Not Supply a Referrer-Policy Header"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Web Application Vulnerable to Cross-Site Request Forgery (CSRF)",
        "tags": "NULL",
        "description": "The web application is potentially vulnerable to cross-site request forgery (CSRF). A CSRF vulnerability arises when a web application does not take steps to prevent websites in other browser tabs from triggering actions on behalf of users who are logged in. Without anti-CSRF measures, other websites can execute actions of the attacker's choosing against the web application using the authenticated session of the user. Often, CSRF attacks are aided by social engineering, but this is not always the case. CSRF attacks can have varying levels of impact depending on the privileges of the affected user. A CSRF attack against a regular user may result in deletion of important data, theft of sensitive data or execution of unwanted actions (such as initiating payments). CSRF attacks against administrators may additionally result in compromise of the entire web application. The use of CSRF tokens is by far the most robust way to counteract CSRF attacks. These one-time random strings are served to the user when they request a webpage, often included as hidden fields in HTML forms. When the user submits the form, the associated action is only carried out if a valid CSRF token is included. This ensures that the user requested the webpage initiating the action in the first place, addressing the vulnerability.",
        "recommendation": "Deploy CSRF tokens on the web application, ensuring they cannot be reused, are strongly random, and sufficiently long.",
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "cwe": 352,
        "cvsScore": {
          "baseScore": 3.7,
          "impactSubscore": 1.4124,
          "exploitabilitySubscore": 2.2211673,
          "overallScore": 3.7
        },
        "severity": { "key": "LOW", "name": "Low" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Web Application Vulnerable to Cross-Site Request Forgery (CSRF)",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Web Application Vulnerable to Cross-Site Request Forgery (CSRF)",
          "tags": "NULL",
          "description": "The web application is potentially vulnerable to cross-site request forgery (CSRF). A CSRF vulnerability arises when a web application does not take steps to prevent websites in other browser tabs from triggering actions on behalf of users who are logged in. Without anti-CSRF measures, other websites can execute actions of the attacker's choosing against the web application using the authenticated session of the user. Often, CSRF attacks are aided by social engineering, but this is not always the case. CSRF attacks can have varying levels of impact depending on the privileges of the affected user. A CSRF attack against a regular user may result in deletion of important data, theft of sensitive data or execution of unwanted actions (such as initiating payments). CSRF attacks against administrators may additionally result in compromise of the entire web application. The use of CSRF tokens is by far the most robust way to counteract CSRF attacks. These one-time random strings are served to the user when they request a webpage, often included as hidden fields in HTML forms. When the user submits the form, the associated action is only carried out if a valid CSRF token is included. This ensures that the user requested the webpage initiating the action in the first place, addressing the vulnerability.",
          "recommendation": "Deploy CSRF tokens on the web application, ensuring they cannot be reused, are strongly random, and sufficiently long.",
          "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssScore": {
            "baseScore": 3.7,
            "impactSubscore": 1.4124,
            "exploitabilitySubscore": 2.2211673,
            "overallScore": 3.7
          },
          "severity": { "key": "LOW", "name": "Low" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "Web Application Vulnerable to Cross-Site Request Forgery (CSRF)"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Server Software Version(s) Disclosed",
        "tags": "NULL",
        "description": "The server discloses information about itself, such as its identity and versioning information. This version information can reveal if the server is running an outdated or vulnerable version. This also allows for an attacker to craft specific exploitation techniques for the identified server and version. Some areas where this information may be revealed include within HTTP headers, on error pages, within cookie values, and within the application itself.",
        "recommendation": "It is recommended to minimize the amount of server information that is detectable wherever possible. This might include server headers such as Server, X-Powered-By, X-AspNet-Version, and others, as well as on error pages or within cookies.",
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "cwe": 200,
        "cvsScore": {
          "baseScore": 3.7,
          "impactSubscore": 1.4124,
          "exploitabilitySubscore": 2.2211673,
          "overallScore": 3.7
        },
        "severity": { "key": "LOW", "name": "Low" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Server Software Version(s) Disclosed",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Server Software Version(s) Disclosed",
          "tags": "NULL",
          "description": "The server discloses information about itself, such as its identity and versioning information. This version information can reveal if the server is running an outdated or vulnerable version. This also allows for an attacker to craft specific exploitation techniques for the identified server and version. Some areas where this information may be revealed include within HTTP headers, on error pages, within cookie values, and within the application itself.",
          "recommendation": "It is recommended to minimize the amount of server information that is detectable wherever possible. This might include server headers such as Server, X-Powered-By, X-AspNet-Version, and others, as well as on error pages or within cookies.",
          "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
          "cvssScore": {
            "baseScore": 3.7,
            "impactSubscore": 1.4124,
            "exploitabilitySubscore": 2.2211673,
            "overallScore": 3.7
          },
          "severity": { "key": "LOW", "name": "Low" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "Server Software Version(s) Disclosed"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "No DMARC Policy Supplied in DNS Records",
        "tags": "NULL",
        "description": "No Domain-based Message Authentication, Reporting, and Conformance (DMARC) entries were detected in the DNS records for the web application. DMARC is a protocol for email authentication that helps prevent email spoofing, a technique used in spam and phishing attacks to trick users into thinking the message has come from a trusted source, or one they are familiar with. It allows domain owners to protect their domain as well as set a consistent policy on how the server should handle messages that are not validated or authenticated.",
        "recommendation": "Deploy a DMARC policy in the DNS TXT records for the web application alongside SPF and DKIM records to ensure that the domain is protected from email spoofing and the appropriate policies are in place for how to handle emails that aren\u00e2\u20ac\u2122t validated or authenticated.",
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "cwe": 290,
        "cvsScore": {
          "baseScore": 3.7,
          "impactSubscore": 1.4124,
          "exploitabilitySubscore": 2.2211673,
          "overallScore": 3.7
        },
        "severity": { "key": "LOW", "name": "Low" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "No DMARC Policy Supplied in DNS Records",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "No DMARC Policy Supplied in DNS Records",
          "tags": "NULL",
          "description": "No Domain-based Message Authentication, Reporting, and Conformance (DMARC) entries were detected in the DNS records for the web application. DMARC is a protocol for email authentication that helps prevent email spoofing, a technique used in spam and phishing attacks to trick users into thinking the message has come from a trusted source, or one they are familiar with. It allows domain owners to protect their domain as well as set a consistent policy on how the server should handle messages that are not validated or authenticated.",
          "recommendation": "Deploy a DMARC policy in the DNS TXT records for the web application alongside SPF and DKIM records to ensure that the domain is protected from email spoofing and the appropriate policies are in place for how to handle emails that aren\u00e2\u20ac\u2122t validated or authenticated.",
          "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssScore": {
            "baseScore": 3.7,
            "impactSubscore": 1.4124,
            "exploitabilitySubscore": 2.2211673,
            "overallScore": 3.7
          },
          "severity": { "key": "LOW", "name": "Low" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "No DMARC Policy Supplied in DNS Records"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Deprecated php version",
        "tags": "NULL",
        "description": "According to its version, PHP installation on remote hosts is no longer supported. The lack of support means that vendors will not release new security patches for the product. As a result, it may contain security holes.",
        "recommendation": "It is recommended to upgrade current version to the latest supported PHP version.",
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "cwe": 16,
        "cvsScore": {
          "baseScore": 4.8,
          "impactSubscore": 2.514072,
          "exploitabilitySubscore": 2.2211673,
          "overallScore": 4.8
        },
        "severity": { "key": "HIGH", "name": "High" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Deprecated php version",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Deprecated php version",
          "tags": "NULL",
          "description": "According to its version, PHP installation on remote hosts is no longer supported. The lack of support means that vendors will not release new security patches for the product. As a result, it may contain security holes.",
          "recommendation": "It is recommended to upgrade current version to the latest supported PHP version.",
          "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
          "cvssScore": {
            "baseScore": 4.8,
            "impactSubscore": 2.514072,
            "exploitabilitySubscore": 2.2211673,
            "overallScore": 4.8
          },
          "severity": { "key": "HIGH", "name": "High" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": { "id": "NULL", "name": "Deprecated php version" },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Content Spoofing",
        "tags": "NULL",
        "description": "The web application is vulnerable to a content spoofing attack. This vulnerability arises when a user-supplied message (possibly containing HTML) is displayed directly by the web application in a way that creates the impression that the message originates from the web application itself. In this way, an attacker is able to cause the web application to display false, misleading, deceptive, or damaging information. Such information can be used to damage the reputation of the organisation, or more commonly in conjunction with a social engineering attack to encourage users to follow a link or call a phone number controlled by the attacker.",
        "recommendation": "Ensure that user-supplied content is clearly marked as such and that it is not included in subsequent application responses unless absolutely necessary.",
        "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
        "cwe": 254,
        "cvsScore": {
          "baseScore": 0.0,
          "impactSubscore": 0.0,
          "exploitabilitySubscore": 3.887042775,
          "overallScore": 0.0
        },
        "severity": { "key": "INFORMATIONAL", "name": "Informational" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": { "id": "NULL", "name": "Content Spoofing", "ptId": "NULL" },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Content Spoofing",
          "tags": "NULL",
          "description": "The web application is vulnerable to a content spoofing attack. This vulnerability arises when a user-supplied message (possibly containing HTML) is displayed directly by the web application in a way that creates the impression that the message originates from the web application itself. In this way, an attacker is able to cause the web application to display false, misleading, deceptive, or damaging information. Such information can be used to damage the reputation of the organisation, or more commonly in conjunction with a social engineering attack to encourage users to follow a link or call a phone number controlled by the attacker.",
          "recommendation": "Ensure that user-supplied content is clearly marked as such and that it is not included in subsequent application responses unless absolutely necessary.",
          "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
          "cvssScore": {
            "baseScore": 0.0,
            "impactSubscore": 0.0,
            "exploitabilitySubscore": 3.887042775,
            "overallScore": 0.0
          },
          "severity": { "key": "INFORMATIONAL", "name": "Informational" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": { "id": "NULL", "name": "Content Spoofing" },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Content-type incorrectly stated",
        "tags": "NULL",
        "description": "If a response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the content type is specified to be a renderable text-based format, then the browser will usually attempt to interpret the response as being in that format, regardless of the actual contents of the response. This behavior might lead to otherwise",
        "recommendation": "For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body. Additionally, the response header \"\"X-content-type-options: nosniff\"\" should be returned in all responses to reduce the likelihood that browsers will interpret content in a way that disregards the Content-type header.",
        "cvssVector": "CVSS2#AV:N/AC:L/Au:N/C:P/I:P/A:N",
        "cwe": 16,
        "cvsScore": {
          "baseScore": 0.0,
          "impactSubscore": 0.0,
          "exploitabilitySubscore": 6.39,
          "overallScore": 0.0
        },
        "severity": { "key": "INFORMATIONAL", "name": "Informational" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Content-type incorrectly stated",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Content-type incorrectly stated",
          "tags": "NULL",
          "description": "If a response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the content type is specified to be a renderable text-based format, then the browser will usually attempt to interpret the response as being in that format, regardless of the actual contents of the response. This behavior might lead to otherwise",
          "recommendation": "For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body. Additionally, the response header \"\"X-content-type-options: nosniff\"\" should be returned in all responses to reduce the likelihood that browsers will interpret content in a way that disregards the Content-type header.",
          "cvssVector": "CVSS2#AV:N/AC:L/Au:N/C:P/I:P/A:N",
          "cvssScore": {
            "baseScore": 0.0,
            "impactSubscore": 0.0,
            "exploitabilitySubscore": 6.39,
            "overallScore": 0.0
          },
          "severity": { "key": "INFORMATIONAL", "name": "Informational" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "Content-type incorrectly stated"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "DNS Wildcard Enabled for Domain",
        "tags": "NULL",
        "description": "The web application appears to use a DNS wildcard for subdomains. A wildcard subdomain DNS entry will cause any subdomain to direct to your server's IP address, even if that subdomain is not explicitly configured in the DNS records for the main domain. While not a direct threat to the security of your web application, this means that any domain name ending with yourcompany.com (such as www.google.com.yourcompany.com) would resolve to the IP address of the web application hosted at yourcompany.com. If your web server becomes compromised, a wildcard DNS entry may make it easier for an attacker to host a malicious website at a legitimate company subdomain, potentially also taking advantage of any SSL/TLS certificates installed on your server.",
        "recommendation": "Consider removing the wildcard DNS entry if it is not necessary for the correct functioning of the web application.",
        "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
        "cwe": 200,
        "cvsScore": {
          "baseScore": 0.0,
          "impactSubscore": 0.0,
          "exploitabilitySubscore": 3.887042775,
          "overallScore": 0.0
        },
        "severity": { "key": "INFORMATIONAL", "name": "Informational" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "DNS Wildcard Enabled for Domain",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "DNS Wildcard Enabled for Domain",
          "tags": "NULL",
          "description": "The web application appears to use a DNS wildcard for subdomains. A wildcard subdomain DNS entry will cause any subdomain to direct to your server's IP address, even if that subdomain is not explicitly configured in the DNS records for the main domain. While not a direct threat to the security of your web application, this means that any domain name ending with yourcompany.com (such as www.google.com.yourcompany.com) would resolve to the IP address of the web application hosted at yourcompany.com. If your web server becomes compromised, a wildcard DNS entry may make it easier for an attacker to host a malicious website at a legitimate company subdomain, potentially also taking advantage of any SSL/TLS certificates installed on your server.",
          "recommendation": "Consider removing the wildcard DNS entry if it is not necessary for the correct functioning of the web application.",
          "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
          "cvssScore": {
            "baseScore": 0.0,
            "impactSubscore": 0.0,
            "exploitabilitySubscore": 3.887042775,
            "overallScore": 0.0
          },
          "severity": { "key": "INFORMATIONAL", "name": "Informational" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "DNS Wildcard Enabled for Domain"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Insecure clientaccesspolicy.xml file",
        "tags": "NULL",
        "description": "The cross-domain policy file specifies the permissions for web clients (such as Java, Adobe Flash, Adobe Reader, etc.) to access data across different domains. For Silverlight, Microsoft adopted a subset of Adobe's cross-domain.xml and created its cross-domain policy file: clientaccesspolicy.xml. Whenever the web client detects that it must request resources from other domains, it will try to look first for a policy file in the target domain to determine whether cross-domain requests (including headers) and socket-based connections are allowed. The main policy file is located in the root directory of the domain.",
        "recommendation": "Determine which sites will be allowed to make the cross-domain connection. Consider the network topology and any authentication mechanisms that will be affected by the configuration or implementation of cross-domain policies.",
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
        "cwe": 942,
        "cvsScore": {
          "baseScore": 3.1,
          "impactSubscore": 1.4124,
          "exploitabilitySubscore": 1.62014556,
          "overallScore": 3.1
        },
        "severity": { "key": "LOW", "name": "Low" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Insecure clientaccesspolicy.xml file",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Insecure clientaccesspolicy.xml file",
          "tags": "NULL",
          "description": "The cross-domain policy file specifies the permissions for web clients (such as Java, Adobe Flash, Adobe Reader, etc.) to access data across different domains. For Silverlight, Microsoft adopted a subset of Adobe's cross-domain.xml and created its cross-domain policy file: clientaccesspolicy.xml. Whenever the web client detects that it must request resources from other domains, it will try to look first for a policy file in the target domain to determine whether cross-domain requests (including headers) and socket-based connections are allowed. The main policy file is located in the root directory of the domain.",
          "recommendation": "Determine which sites will be allowed to make the cross-domain connection. Consider the network topology and any authentication mechanisms that will be affected by the configuration or implementation of cross-domain policies.",
          "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
          "cvssScore": {
            "baseScore": 3.1,
            "impactSubscore": 1.4124,
            "exploitabilitySubscore": 1.62014556,
            "overallScore": 3.1
          },
          "severity": { "key": "LOW", "name": "Low" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "Insecure clientaccesspolicy.xml file"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Web Application Does Not Supply a Permissions Policy",
        "tags": "NULL",
        "description": "The web application does not return a Permissions-Policy header in request responses. The Permissions-Policy header (formerly named Feature-Policy) is an HTTP response header returned by web applications that restricts the functionality of the web application in the browser to help safeguard against malicious behavior introduced by attackers. For example, if the website does not require access to the microphone or camera, the permissions policy can completely disable the microphone and camera APIs, preventing a successful XSS attack from exploiting them. The feature-policy header implementation is now deprecated and no longer supported on all versions of every browser.",
        "recommendation": "Implement a Permissions-Policy header that restricts the APIs and browser features available to client-side code to only those necessary for the web application to function correctly. If using a Feature-Policy, it is recommended to switch to a Permissions-Policy as that is now the widely supported header.",
        "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
        "cwe": 693,
        "cvsScore": {
          "baseScore": 3.1,
          "impactSubscore": 1.4124,
          "exploitabilitySubscore": 1.62014556,
          "overallScore": 3.1
        },
        "severity": { "key": "LOW", "name": "Low" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Web Application Does Not Supply a Permissions Policy",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Web Application Does Not Supply a Permissions Policy",
          "tags": "NULL",
          "description": "The web application does not return a Permissions-Policy header in request responses. The Permissions-Policy header (formerly named Feature-Policy) is an HTTP response header returned by web applications that restricts the functionality of the web application in the browser to help safeguard against malicious behavior introduced by attackers. For example, if the website does not require access to the microphone or camera, the permissions policy can completely disable the microphone and camera APIs, preventing a successful XSS attack from exploiting them. The feature-policy header implementation is now deprecated and no longer supported on all versions of every browser.",
          "recommendation": "Implement a Permissions-Policy header that restricts the APIs and browser features available to client-side code to only those necessary for the web application to function correctly. If using a Feature-Policy, it is recommended to switch to a Permissions-Policy as that is now the widely supported header.",
          "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
          "cvssScore": {
            "baseScore": 3.1,
            "impactSubscore": 1.4124,
            "exploitabilitySubscore": 1.62014556,
            "overallScore": 3.1
          },
          "severity": { "key": "LOW", "name": "Low" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": {
            "id": "NULL",
            "name": "Web Application Does Not Supply a Permissions Policy"
          },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      },
      {
        "id": "NULL",
        "name": "Directory Listing",
        "tags": "NULL",
        "description": "Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.",
        "recommendation": "There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways: Configure your web server to prevent directory listings for all paths beneath the web root; Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.",
        "cvssVector": "CVSS2#AV:N/AC:L/Au:N/C:P/I:N/A:N",
        "cwe": 200,
        "cvsScore": {
          "baseScore": 4.95845112,
          "impactSubscore": 2.86275,
          "exploitabilitySubscore": 9.9968,
          "overallScore": 4.95845112
        },
        "severity": { "key": "MEDIUM", "name": "Medium" },
        "updatedAt": "NULL",
        "createdAt": "NULL",
        "pentest": {
          "id": "NULL",
          "name": "Directory Listing",
          "ptId": "NULL"
        },
        "cateogry": "Web Application",
        "findings": [
          {
            "id": "NULL",
            "executionId": "NULL",
            "findingType": "NULL",
            "wfName": "NULL",
            "asset": { "id": "NULL", "name": "NULL" },
            "ipaddress": "NULL",
            "url": "NULL",
            "findingPocs": [{ "id": "NULL", "url": "NULL" }]
          }
        ],
        "findingsAggregate": { "count": 1 },
        "details": {
          "id": "NULL",
          "name": "Directory Listing",
          "tags": "NULL",
          "description": "Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.",
          "recommendation": "There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways: Configure your web server to prevent directory listings for all paths beneath the web root; Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.",
          "cvssVector": "CVSS2#AV:N/AC:L/Au:N/C:P/I:N/A:N",
          "cvssScore": {
            "baseScore": 4.95845112,
            "impactSubscore": 2.86275,
            "exploitabilitySubscore": 9.9968,
            "overallScore": 4.95845112
          },
          "severity": { "key": "MEDIUM", "name": "Medium" },
          "updatedAt": "NULL",
          "createdAt": "NULL",
          "pentest": { "id": "NULL", "name": "Directory Listing" },
          "findingsAggregate": { "count": 1 },
          "complianceStandards": [{ "id": "NULL", "name": "NULL" }],
          "references": { "url": "NULL", "title": "NULL" },
          "vulnerabilityStandards": [{ "id": "NULL", "name": "NULL" }],
          "findings": [
            {
              "id": "NULL",
              "asset": { "id": "NULL", "name": "NULL" },
              "ipaddress": { "id": "NULL", "name": "NULL" },
              "url": "NULL",
              "findingPocs": [{ "id": "NULL", "url": "NULL" }]
            }
          ]
        }
      }
    ]
  }
}
